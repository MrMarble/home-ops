##################################
# ModSecurity and CRS configuration
##################################

# By default is DetectionOnly. Can be any of: DetectionOnly,On,Off
SecRuleEngine DetectionOnly
# Avoid sending status information about ModSecurity in response header
SecStatusEngine Off
# Send ModSecurity audit logs to the stdout (only for rejected requests)
# Se https://github.com/kubernetes/ingress-nginx/issues/6438#issuecomment-728955575 and  https://www.nginx.com/blog/modsecurity-logging-and-debugging/
SecAuditLog /dev/stdout
SecAuditLogFormat JSON
SecAuditEngine RelevantOnly
# SecDebugLog /dev/stdout
# SecDebugLogLevel 9 # (1-9, 9 is the max)# Enable scanning of the request body
SecRequestBodyAccess On
# Enable XML and JSON parsing
SecRule REQUEST_HEADERS:Content-Type "(?:application(?:/soap\+|/)|text/)xml" \
  "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"
SecRule REQUEST_HEADERS:Content-Type "application/json" \
    "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"
# Max request sizes in bytes (with/without files) - Note NGINX Ingress has its own parameter/annotation that should be kept in sync
# 20Mb (default is 12.5Mb)
SecRequestBodyLimit 20971520
# 250Kb (default is 128Kb)
SecRequestBodyNoFilesLimit 262144
# Reject if larger (we could also let it pass with ProcessPartial)# Reject request if failed to parse request body
SecRequestBodyLimitAction Reject
SecRule REQBODY_ERROR "!@eq 0" \
  "id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"
# recommended limits for regular expression recursion. See https://github.com/SpiderLabs/owasp-modsecurity-crs/issues/656#issuecomment-262780221
SecPcreMatchLimit 500000
SecPcreMatchLimitRecursion 500000
# Disable scanning of responses. Not the best place to stop an attack, and consumes a good deal of cpu/memory
SecResponseBodyAccess Off
SecResponseBodyLimitAction ProcessPartial
# Include PUT/PATCH/DELETE/PROPFIND in the allowed methods, otherwise those verbs will be rejected by rule 911100
SecAction "id:900200,phase:1,nolog,pass,t:none,\
  setvar:tx.allowed_methods=GET HEAD POST OPTIONS PUT PATCH DELETE PROPFIND"
# Set paranoia level to 1 for OWASP CRS rules
# Can optionally set tx.executing_paranoia_level as per commented line, so we can test higher level rules (without blocking traffic)
SecAction \
  "id:900000,\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.paranoia_level=1"
# SecAction \
#   "id:900001,\
#   phase:1,\
#   nolog,\
#   pass,\
#   t:none,\
#   setvar:tx.executing_paranoia_level=2"

# Update config to include PUT/PATCH/DELETE/PROPFIND in the allowed HTTP methods (instead of fully disabling 911100)
SecAction "id:900200,phase:1,nolog,pass,t:none,setvar:tx.allowed_methods=GET HEAD POST OPTIONS PUT PATCH DELETE PROPFIND"


##################################
# False positives
##################################

# Disable rule 921110 - HTTP Request Smuggling Attack - for webDAV requests
#SecRuleUpdateTargetById 921110 "!REQUEST_URI:/^remote.php\/dav\/files.*/"
